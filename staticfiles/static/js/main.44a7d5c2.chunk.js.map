{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","staffId","setStaffId","useState","driverName","setDriverName","staffIdSuggestions","setStaffIdSuggestions","driverNameSuggestions","setDriverNameSuggestions","useEffect","axios","get","concat","then","response","data","driver_name","React","createElement","className","method","htmlFor","type","id","name","value","onChange","e","target","list","map","suggestion","index","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yKA+EeA,MA5EHA,KACR,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAAYC,GAAiBF,mBAAS,KACtCG,EAAoBC,GAAyBJ,mBAAS,KACtDK,EAAuBC,GAA4BN,mBAAS,IAuBnE,OArBAO,oBAAU,KACFT,GACAU,IAAMC,IAAG,gCAAAC,OAAiCZ,IACrCa,KAAKC,GAAYR,EAAsBQ,EAASC,QAE1D,CAACf,IAEJS,oBAAU,KACFT,GACAU,IAAMC,IAAG,8BAAAC,OAA+BZ,IACnCa,KAAKC,GAAYV,EAAcU,EAASC,KAAKC,eAEvD,CAAChB,IAEJS,oBAAU,KACFN,GACAO,IAAMC,IAAG,8BAAAC,OAA+BT,IACnCU,KAAKC,GAAYN,EAAyBM,EAASC,QAE7D,CAACZ,IAGAc,IAAAC,cAAA,OAAKC,UAAU,4BACXF,IAAAC,cAAA,QAAME,OAAO,QACTH,IAAAC,cAAA,OAAKC,UAAU,YACXF,IAAAC,cAAA,OAAKC,UAAU,uBACXF,IAAAC,cAAA,SAAOG,QAAQ,YAAW,YAC1BJ,IAAAC,cAAA,SACII,KAAK,OACLC,GAAG,WACHC,KAAK,WACLC,MAAOzB,EACP0B,SAAWC,GAAM1B,EAAW0B,EAAEC,OAAOH,OACrCI,KAAK,gBACLV,UAAU,iBAEdF,IAAAC,cAAA,YAAUK,GAAG,iBACRlB,EAAmByB,IAAI,CAACC,EAAYC,IACjCf,IAAAC,cAAA,UAAQe,IAAKD,EAAOP,MAAOM,OAIvCd,IAAAC,cAAA,OAAKC,UAAU,uBACXF,IAAAC,cAAA,SAAOG,QAAQ,eAAc,eAC7BJ,IAAAC,cAAA,SACII,KAAK,OACLC,GAAG,cACHC,KAAK,cACLC,MAAOtB,EACPuB,SAAWC,GAAMvB,EAAcuB,EAAEC,OAAOH,OACxCI,KAAK,mBACLV,UAAU,iBAEdF,IAAAC,cAAA,YAAUK,GAAG,oBACRhB,EAAsBuB,IAAI,CAACC,EAAYC,IACpCf,IAAAC,cAAA,UAAQe,IAAKD,EAAOP,MAAOM,OAIvCd,IAAAC,cAAA,OAAKC,UAAU,uBACXF,IAAAC,cAAA,SAAOG,QAAQ,gBAAe,gBAC9BJ,IAAAC,cAAA,SAAOI,KAAK,OAAOC,GAAG,eAAeC,KAAK,eAAeL,UAAU,mBAG3EF,IAAAC,cAAA,UAAQI,KAAK,SAASH,UAAU,mBAAkB,aC7DnDe,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAV,EAAA,GAAAd,KAAAwB,EAAAC,KAAA,UAAqBzB,KAAK0B,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhC,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAACnB,EAAG,QAORmC","file":"static/js/main.44a7d5c2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n    const [staffId, setStaffId] = useState('');\n    const [driverName, setDriverName] = useState('');\n    const [staffIdSuggestions, setStaffIdSuggestions] = useState([]);\n    const [driverNameSuggestions, setDriverNameSuggestions] = useState([]);\n\n    useEffect(() => {\n        if (staffId) {\n            axios.get(`/staff-id-autocomplete/?term=${staffId}`)\n                .then(response => setStaffIdSuggestions(response.data));\n        }\n    }, [staffId]);\n\n    useEffect(() => {\n        if (staffId) {\n            axios.get(`/get-driver-name/?staff_id=${staffId}`)\n                .then(response => setDriverName(response.data.driver_name));\n        }\n    }, [staffId]);\n\n    useEffect(() => {\n        if (driverName) {\n            axios.get(`/driver-autocomplete/?term=${driverName}`)\n                .then(response => setDriverNameSuggestions(response.data));\n        }\n    }, [driverName]);\n\n    return (\n        <div className=\"container form-container\">\n            <form method=\"post\">\n                <div className=\"form-row\">\n                    <div className=\"form-group col-md-4\">\n                        <label htmlFor=\"staff_id\">Staff ID</label>\n                        <input\n                            type=\"text\"\n                            id=\"staff_id\"\n                            name=\"staff_id\"\n                            value={staffId}\n                            onChange={(e) => setStaffId(e.target.value)}\n                            list=\"staff_id_list\"\n                            className=\"form-control\"\n                        />\n                        <datalist id=\"staff_id_list\">\n                            {staffIdSuggestions.map((suggestion, index) => (\n                                <option key={index} value={suggestion} />\n                            ))}\n                        </datalist>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                        <label htmlFor=\"driver_name\">Driver Name</label>\n                        <input\n                            type=\"text\"\n                            id=\"driver_name\"\n                            name=\"driver_name\"\n                            value={driverName}\n                            onChange={(e) => setDriverName(e.target.value)}\n                            list=\"driver_name_list\"\n                            className=\"form-control\"\n                        />\n                        <datalist id=\"driver_name_list\">\n                            {driverNameSuggestions.map((suggestion, index) => (\n                                <option key={index} value={suggestion} />\n                            ))}\n                        </datalist>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                        <label htmlFor=\"duty_card_no\">Duty Card No</label>\n                        <input type=\"text\" id=\"duty_card_no\" name=\"duty_card_no\" className=\"form-control\" />\n                    </div>\n                </div>\n                <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}